{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AlexanDoor\\\\WebstormProjects\\\\shittest\\\\my-app\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { ContentState, convertToRaw, EditorState } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [content, setContent] = useState('');\n  const [editorState, setEditorState] = useState(EditorState.createWithContent(ContentState.createFromText('')));\n  const _uploadImageCallBack = file => {\n    // long story short, every time we upload an image, we\n    // need to save it to the state so we can get it's data\n    // later when we decide what to do with it.\n\n    // Make sure you have a uploadImages: [] as your default state\n    // @ts-ignore\n    let uploadedImages = this.state.uploadedImages;\n    const imageObject = {\n      file: file,\n      localSrc: URL.createObjectURL(file)\n    };\n    uploadedImages.push(imageObject);\n\n    // @ts-ignore\n    this.setState({\n      uploadedImages: uploadedImages\n    });\n\n    // We need to return a promise with the image src\n    // the img src we will use here will be what's needed\n    // to preview it in the browser. This will be different than what\n    // we will see in the index.md file we generate.\n    return new Promise((resolve, reject) => {\n      resolve({\n        data: {\n          link: imageObject.localSrc\n        }\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Editor, {\n    toolbarClassName: \"toolbarClassName\",\n    wrapperClassName: \"wrapperClassName\",\n    editorClassName: \"editorClassName\",\n    editorState: editorState,\n    placeholder: \"\\u041F\\u0438\\u0448\\u0443 \\u0445\\u0443\\u0439\\u043D\\u044E \\u043D\\u0430 \\u0441\\u0442\\u044D\\u043A\\u0435 PIDOR\",\n    onEditorStateChange: newState => {\n      setEditorState(newState);\n      setContent(draftToHtml(convertToRaw(newState.getCurrentContent())));\n    },\n    toolbar: {\n      options: ['inline', 'blockType', 'fontSize', 'list', 'textAlign', 'history', 'embedded', 'emoji', 'image'],\n      inline: {\n        isDropdown: true\n      },\n      list: {\n        isDropdown: true\n      },\n      textAlign: {\n        isDropdown: true\n      },\n      link: {\n        isDropdown: true\n      },\n      history: {\n        isDropdown: true\n      },\n      image: {\n        uploadCallback: this._uploadImageCallBack\n      },\n      inputAccept: 'application/pdf,' + 'text/plain,' + 'application/' + 'vnd.openxml' + 'formatsoffi' + 'cedocument.word' + 'processingml.doc' + 'ument,application/ms' + 'word,application/vnd.m' + 's-excel'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"52ZBSSWBdBftpslKhYuzHXSibn4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Editor","ContentState","convertToRaw","EditorState","draftToHtml","jsxDEV","_jsxDEV","App","_s","content","setContent","editorState","setEditorState","createWithContent","createFromText","_uploadImageCallBack","file","uploadedImages","state","imageObject","localSrc","URL","createObjectURL","push","setState","Promise","resolve","reject","data","link","toolbarClassName","wrapperClassName","editorClassName","placeholder","onEditorStateChange","newState","getCurrentContent","toolbar","options","inline","isDropdown","list","textAlign","history","image","uploadCallback","inputAccept","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/AlexanDoor/WebstormProjects/shittest/my-app/src/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nimport {Editor} from \"react-draft-wysiwyg\";\nimport {ContentState, convertToRaw, EditorState} from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\nconst App = () => {\n\n\n    const [content, setContent] = useState<string>('')\n    const [editorState, setEditorState] = useState<EditorState>\n    (EditorState.createWithContent(ContentState.createFromText('')))\n\n    const _uploadImageCallBack = (file:any) => {\n        // long story short, every time we upload an image, we\n        // need to save it to the state so we can get it's data\n        // later when we decide what to do with it.\n\n        // Make sure you have a uploadImages: [] as your default state\n        // @ts-ignore\n        let uploadedImages = this.state.uploadedImages;\n\n        const imageObject = {\n            file: file,\n            localSrc: URL.createObjectURL(file),\n        }\n\n        uploadedImages.push(imageObject);\n\n        // @ts-ignore\n        this.setState({ uploadedImages: uploadedImages })\n\n        // We need to return a promise with the image src\n        // the img src we will use here will be what's needed\n        // to preview it in the browser. This will be different than what\n        // we will see in the index.md file we generate.\n        return new Promise(\n            (resolve, reject) => {\n                resolve({ data: { link: imageObject.localSrc } });\n            }\n        );\n    }\n    return (\n        <Editor\n            toolbarClassName=\"toolbarClassName\"\n            wrapperClassName=\"wrapperClassName\"\n            editorClassName=\"editorClassName\"\n            editorState={editorState}\n            placeholder=\"Пишу хуйню на стэке PIDOR\"\n            onEditorStateChange={newState=>{\n                setEditorState(newState)\n                setContent(draftToHtml(convertToRaw(newState.getCurrentContent())))\n            }}\n            toolbar={{\n                options:['inline','blockType','fontSize','list', 'textAlign', 'history', 'embedded', 'emoji', 'image'],\n                inline:{isDropdown:true},\n                list:{isDropdown:true},\n                textAlign:{isDropdown:true},\n                link:{isDropdown:true},\n                history:{isDropdown:true},\n                image: { uploadCallback: this._uploadImageCallBack },\n                inputAccept:\n                    'application/pdf,' +\n                    'text/plain,' +\n                    'application/' +\n                    'vnd.openxml' +\n                    'formatsoffi' +\n                    'cedocument.word' +\n                    'processingml.doc' +\n                    'ument,application/ms' +\n                    'word,application/vnd.m' +\n                    's-excel'\n\n            }}\n        />\n    );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAO,WAAW;AAElB,SAAQC,MAAM,QAAO,qBAAqB;AAC1C,SAAQC,YAAY,EAAEC,YAAY,EAAEC,WAAW,QAAO,UAAU;AAChE,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAO,kDAAkD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAGd,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAS,EAAE,CAAC;EAClD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAC7CI,WAAW,CAACU,iBAAiB,CAACZ,YAAY,CAACa,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;EAEhE,MAAMC,oBAAoB,GAAIC,IAAQ,IAAK;IACvC;IACA;IACA;;IAEA;IACA;IACA,IAAIC,cAAc,GAAG,IAAI,CAACC,KAAK,CAACD,cAAc;IAE9C,MAAME,WAAW,GAAG;MAChBH,IAAI,EAAEA,IAAI;MACVI,QAAQ,EAAEC,GAAG,CAACC,eAAe,CAACN,IAAI;IACtC,CAAC;IAEDC,cAAc,CAACM,IAAI,CAACJ,WAAW,CAAC;;IAEhC;IACA,IAAI,CAACK,QAAQ,CAAC;MAAEP,cAAc,EAAEA;IAAe,CAAC,CAAC;;IAEjD;IACA;IACA;IACA;IACA,OAAO,IAAIQ,OAAO,CACd,CAACC,OAAO,EAAEC,MAAM,KAAK;MACjBD,OAAO,CAAC;QAAEE,IAAI,EAAE;UAAEC,IAAI,EAAEV,WAAW,CAACC;QAAS;MAAE,CAAC,CAAC;IACrD,CAAC,CACJ;EACL,CAAC;EACD,oBACId,OAAA,CAACN,MAAM;IACH8B,gBAAgB,EAAC,kBAAkB;IACnCC,gBAAgB,EAAC,kBAAkB;IACnCC,eAAe,EAAC,iBAAiB;IACjCrB,WAAW,EAAEA,WAAY;IACzBsB,WAAW,EAAC,2GAA2B;IACvCC,mBAAmB,EAAEC,QAAQ,IAAE;MAC3BvB,cAAc,CAACuB,QAAQ,CAAC;MACxBzB,UAAU,CAACN,WAAW,CAACF,YAAY,CAACiC,QAAQ,CAACC,iBAAiB,EAAE,CAAC,CAAC,CAAC;IACvE,CAAE;IACFC,OAAO,EAAE;MACLC,OAAO,EAAC,CAAC,QAAQ,EAAC,WAAW,EAAC,UAAU,EAAC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC;MACtGC,MAAM,EAAC;QAACC,UAAU,EAAC;MAAI,CAAC;MACxBC,IAAI,EAAC;QAACD,UAAU,EAAC;MAAI,CAAC;MACtBE,SAAS,EAAC;QAACF,UAAU,EAAC;MAAI,CAAC;MAC3BX,IAAI,EAAC;QAACW,UAAU,EAAC;MAAI,CAAC;MACtBG,OAAO,EAAC;QAACH,UAAU,EAAC;MAAI,CAAC;MACzBI,KAAK,EAAE;QAAEC,cAAc,EAAE,IAAI,CAAC9B;MAAqB,CAAC;MACpD+B,WAAW,EACP,kBAAkB,GAClB,aAAa,GACb,cAAc,GACd,aAAa,GACb,aAAa,GACb,iBAAiB,GACjB,kBAAkB,GAClB,sBAAsB,GACtB,wBAAwB,GACxB;IAER;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACJ;AAEV,CAAC;AAAC1C,EAAA,CAtEID,GAAG;AAAA4C,EAAA,GAAH5C,GAAG;AAwET,eAAeA,GAAG;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}